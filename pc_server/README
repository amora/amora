== Introduction ==

These are templates for a modern autoconf/automake build system,
using separate directories for everything and non-recursive make.

This document assumes you have basic notions of what autoconf and automake
are. It uses some modern features of autotools which are not so common.

Please read http://moin.conectiva.com.br/AutotoolsetTips for some tips
(or the local copy: AutotoolsetTips.html, available with this template).

This template is licensed under the GNU-GPL, which basically means any
changes in the build-scripts must be made public and released under the
same license if they're ever distributed. See the COPYING file for
details.

The build-system code can be downloaded from:
http://svn.ademar.org/code/trunk/autotools-build_system-template

If you have any question or believe you need an exception for this
license, please contact Ademar Reis <ademar@ademar.org>.


== Descriptions of template files ==

 - configure.ac: if you don't know what this file is, you should read a
                 tutorial or two about autoconf;
 - Makefile.am: if you don't know what this file is, you should read a
                tutorial or two about automake;
 - *.pc.in: pkg-config files. See the list of resources below;
 - mk/auxdevel.am: main makefile addons (included in Makefile.am);
 - mk/libtool-fix.am: fix for b0rken "make -s" on some systems when
                      using libtool;
 - m4/auxdevel.m4: main autoconf macros used by this template;
 - m4/check.m4: macros to support unit-tests via check;
 - m4/acx_pthread.m4: autoconf macros to search for pthread in a portable
                      way on different unixes;
 - m4/define_dirs.m4: autoconf macros that define installation directories
                      at configure time;


== Usage ==

You should be able to understand the way this template works by looking at
the source, output and the examples inside configure.ac and Makefile.am.

Important hints:
  - autoreconf is all you need to run in order to generate the build
    scripts (see the step-by-step guide below);
  - configure should not be run on the top directory. You should create
    a build directory and call configure from there (see the step-by-step
    guide below);
  - If you don't understand what a particular macro or keyword means, try
    looking for its documentation on the info pages or google for it.

A step-by-step guide:

  * Change configure.ac and Makefile.am, changing source-code references and
    removing what you don't need. The template includes as output config
    files, pkgconfig and has a lot of other features which probably are not
    needed by your project;
  * If you're building libraries, rename and fill the *.pc.in files
  * Run "autoreconf -ifs" (see --help) to generate the configure and other
    necessary scripts.
  * To build your software, create a build-directory and run configure from
    there (avoid polution on the top directory, as most autotools based
    software do); Examples of correct configure usage:
    $ mkdir build; cd build; ../configure; make; make install; [...]
    $ mkdir /tmp/bla; cd /tmp/bla; /path-to-project/configure; make; [...]
  * To confirm that everything is OK, run "make distcheck";
  * To test installation, use "make install DESTDIR=/whatever-tmp-dir";
  * To reference an installation path inside the source-code, use the set of
    macros provided by m4/define-dirs.m4;

Interesting/additional make targets:

  * make check
  * make lcov
  * make debug
  * make doc

Important directory path variables set by configure.ac:

  * srcdir: The top directory for your package (standard autoconf variable).
  * csource: Where you keep the source files.  These templates
             assume that you keep the source in a subdirectory of $srcdir.
  * headerdir: If your package distribute header files, set to the directory
               where you keep them.
  * utestdir: Directory where check test suites are kept.

Useful resources:
 - good, extense autotools tutorial:
   http://www-src.lip6.fr/homepages/Alexandre.Duret-Lutz/autotools.html
 - doxygen: http://www.stack.nl/~dimitri/doxygen
 - check: http://check.sourceforge.net
 - lcov: http://ltp.sourceforge.net/coverage/lcov.php
 - pkgconfig: http://pkgconfig.freedesktop.org/wiki/
 - program library howto: http://tldp.org/HOWTO/Program-Library-HOWTO/
 - why recursive make is a bad idea:
   http://members.canb.auug.org.au/~millerp/rmch/recu-make-cons-harm.html

== SVN integration ==

The file svn-ignore contains listing of files which should not be kept under
revision control. Use them like this:

{{{
  frobnicator $ svn propset svn:ignore -F svn-ignore .
}}}


== Glossary ==

  * Autoconf is a tool for configuring sources.  It's main use is to deal with
    portability issues and ensuring the presence of needed dependencies.  It's
    also useful for configuring C defines and other options which should be set
    by the user before compiling.

  * Automake is a tool for generating makefiles with lots of standard targets.
    These targets are complicated to be built in a manner portable to different
    make implementations.  Many of them, like "make tags", "make uninstall" or
    "make distcheck", came to be expected by users.  Since they're complicated
    and mechanic, they're good candidates for auto generation.  Automake assumes
    that the package uses autoconf, and provides the infrastructure for libtool,
    gettext and check.

    We're requiring Automake to ensure portable, VPATH-enabled makefiles with
    targets used in the test system, like "make distcheck".

  * Libtool is a tool for building shared libraries and dlopen(3) modules.  Not
    all systems have a shared library system, and those who do often use very
    different schemes for building, installing, using and removing the
    libraries.  Libtool can take care of these tasks for many different systems.

# vim: et:
