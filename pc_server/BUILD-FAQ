Autotools build-system FAQ
(see the README file for more details)

Questions

1. How do I build from repository?
2. What versions of autotools I need?
3. Ok, how do I setup?
4. When running "autoreconf" (or "automake") I receive lots of warnings.
5. I did setup. Now how do I build?
6. I have the tools in a supported version, but it still is not compiling.
7. I was not able to compile from the tarball in my system.
8. What the makefile can do?
9. I get lots of errors "arc profiling: Can't open output file [...]". What
   can I do?

Answers

1. How do I build from repository?

  No auto-generated files are kept in the repository. To build, you'll need to
  setup the sources once using autotools.

  Please note that this requirement is only for building directly from
  repository. The tarballs which are released to the user are compiled without
  even using autoconf or automake.


2. What versions of autotools I need?

  You need at least autoconf 2.58, automake 1.7.9, and libtool 1.4.3. But
  there's one very important rule when working with autotools: do not run
  tools of versions on top of already autogenerated file. IOW, if you're
  hacking the build-system, make sure you regenerate all files with a
  consistent toolset, otherwise you may get obscure errors.

  I'm sorry for this requirement, but the autotools have no backward or forward
  compatibility whatsoever. It's enough work to make these things work for a
  given version; it's impossible to write a build system which works on all
  autotools versions.

  If you need to compile for an unsupported system, use the distribution tarball
  instead of the Subversion repository. You can create a .tar.gz with "make
  dist" in a working development system.

  Fixing errors caused by using newer versions of the autotools is not a
  priority, but I have personal interest about this kind of problem. If you're
  trying to build in a system which is more recent than CL10 and you're having
  problems, let me know.


3. Ok, how do I setup?

  Run "autoreconf -if" to run autoconf, automake and related scripts, as well
  as installing symlinks in scripts/. Make sure that all symlinks created by
  autoreconf are marked as ignored.

  Be aware that, in CL10, the scripts in /usr/share/automake have the execute
  permission bit off and thus the symlinks will not work (bugzilla #13106). If
  you have this problem, you can either fix the system files manually:
    frobnicator $ sudo chmod a+x $(grep -l '^#!' /usr/share/automake/*)
  or avoid using symlinks:
    frobnicator $ autoreconf -if
    frobnicator $ chmod u+x $(grep -l '^#!' scripts/*)

  By convention, the top source directory is set to ignore a subdirectory called
  "build", so that you can "mkdir build" and have a handy place to build the
  package.

4. When running autoreconf (or automake) I receive lots of warnings.

  If you're using automake 1.9, it's normal to receive warnings about
  underquoting:

  m4/check.m4:5: warning: underquoted definition of AM_PATH_CHECK run info
  '(automake)Extending aclocal' or see
  http://sources.redhat.com/automake/automake.html#Extending-aclocal
  /usr/share/aclocal-1.9/pkg.m4:5: warning: underquoted definition of
    PKG_CHECK_MODULES
  /usr/share/aclocal-1.9/linc.m4:1: warning: underquoted definition of
    AM_PATH_LINC
  [...]

  The new automake 1.9 is more strict about quoting, and many third-party m4
  packages weren't updated for the new requirements.

5. I did setup. Now how do I build?

  You can build from any directory, but to avoid cluttering, it is not
  recommended to use the top level source directory.

    srcdir/ $ cd build

  Then run configure. You'll only need to rerun this script if you
  want to change options.

    build/ $ ../configure -C --enable-cncdevel

  Finally you can run make in all of its glory.

    build/ $ make  # make check, make dist, make tags, make install etc.

  When calling make, the makefile will automatically rerun autoconf, automake,
  configure etc. if you change build system files (in this case, you'll probably
  want to run "make clean" for recompiling).

6. I have the tools in a supported version, but it's still not compiling.

  This is a build system bug. Please talk about it with me and the
  responsible for the package.

7. I was not able to compile from the tarball in my system.

  This is either a build system or a portability bug. Please talk about it with
  me and the responsible for the package.

8. What can the makefile do?

  make dist: generates a gzipped tarball, able to be compiled without autotools.
  make dist-bzip2: like "make dist", but uses bzip2.
  make tags: make a tags file for use with Emacs.
  make ctags: make a tags file for use with vi.
  make install: install the software, including documentation
  make install-strip: like make install, but strip executables
  make uninstall: remove files installed by a "make install"
  make clean: delete files created from building the program
  make distclean: like make clean, and also delete files created by configuring
  make maintainer-clean: like make distclean, but also delete things which need
    special tools to build (like info pages, tags tables, etc.)
  make installdirs: create the directories needed for installation
  make install-exec: install only the executables
  make install-data: install only the shared data
  make check: run Check tests
  make distcheck: generates a tarball distribution, try to compile from it and
    then test. This will find missing files which should be added in the
    distribution, or extraneous files which should be removed when cleaning
  make lcov: run Check tests and generate LCOV test coverage data
  make doxygen: generates doxygen documentation

9. I get lots of errors "arc profiling: Can't open output file [...]". What
   can I do?

  This error is known to happen when ccache is being used with GCOV compilation
  flags, enabled by --enable-lcov or --enable-cncdevel. Either disable GCOV
  flags or ccache.
